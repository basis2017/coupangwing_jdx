##########test real

import os
import time
import hmac
import hashlib
import urllib.parse
import urllib.request
import ssl
import json

#********************************************************#
import json
with open("C:\\Users\\bel03\OneDrive\\바탕 화면\\WORK\\coupang\\jdx\\jdx_result2.py", "r", encoding="utf-8") as f:
	all_data = json.load(f)

with open("C:\\Users\\bel03\OneDrive\\바탕 화면\\WORK\\coupang\\jdx\\jdx_metadata.py", "r", encoding="utf-8") as ff:
	metadata = json.load(ff)

all_code = list(all_data.keys())
for code in all_code:
	code_dict = all_data[f"{code}"]
	displayCategoryCode = code_dict["displayCategoryCode"]  # str
	sellerProductName = code_dict["sellerProductName"]  # str
	displayProductName = code_dict["displayProductName"]  # str
	generalProductName = code_dict["generalProductName"]  # str
	originalPrice = int(code_dict["originalPrice"])  # str
	salePrice = int(code_dict["salePrice"])  # str
	attributeTypeName_size = code_dict["attributeTypeName_size"]  # list
	attributeTypeName_color = code_dict["attributeTypeName_color"]  # str
	imageType_REPRESENTATION = code_dict["imageType_REPRESENTATION"]  # list
	imageType_DETAIL = code_dict["imageType_DETAIL"]  # str

#****************************************************************************************************************#
#make "noticeCategories" parameter
	noticeCategoryDetailName_list = [] #['제품 소재', '색상', '치수']
	meta_by_code = metadata[f"{displayCategoryCode}"]["data"]["noticeCategories"][0]
	noticeCategoryName = meta_by_code["noticeCategoryName"] #의류
	n = 0
	while True:
		try:
			noticeCategoryDetailName = meta_by_code["noticeCategoryDetailNames"][n]["noticeCategoryDetailName"]
			n += 1
			noticeCategoryDetailName_list.append(noticeCategoryDetailName)
		except:
			break

	notice_val = []

	for name in noticeCategoryDetailName_list:
		notice_dict = {}
		notice_dict["noticeCategoryName"] = noticeCategoryName
		notice_dict["noticeCategoryDetailName"] = name
		notice_dict["content"] = "상세페이지 참조"

		notice_val.append(notice_dict)

#****************************************************************************************************************#
#make "images" parameter

	img_val = []
	i = 0
	for front_photo in imageType_REPRESENTATION:
		img = {}
		img["imageOrder"] = i
		img["imageType"] = "REPRESENTATION"
		img["vendorPath"] = front_photo
		img_val.append(img)
		i += 1

	img_val.append(
			{
		"imageOrder": i,
		"imageType": "DETAIL",
		"vendorPath": "http://thumbnail10.coupangcdn.com/thumbnails/remote/q89/image/vendor_inventory/31f1/5afd38c12424908d0762e77965fc77dad84a2d72a000f8f1c2cd3cef0513.jpg"
		}
	)

	img_val.append(
			{
		"imageOrder": i+1,
		"imageType": "DETAIL",
		"vendorPath": f"{imageType_DETAIL}"
		}
	)

	#****************************************************************************************************************#
	#make "items" parameter


	item_val = []

	for size in attributeTypeName_size:
		item_info = {
				"itemName": f"{attributeTypeName_color} {size}",
				"originalPrice": originalPrice,
				"salePrice": salePrice,
				"maximumBuyCount": 3,
				"maximumBuyForPerson": 0,
				"outboundShippingTimeDay": 2,
				"maximumBuyForPersonPeriod": 1,
				"unitCount": 1,
				"adultOnly": "EVERYONE",
				"taxType": "TAX",
				"parallelImported": "NOT_PARALLEL_IMPORTED",
				"overseasPurchased": "NOT_OVERSEAS_PURCHASED",
				"pccNeeded": "false",
				# "externalVendorSku": "0001",
				# "barcode": "",
				# "emptyBarcode": true,
				# "emptyBarcodeReason": "상품확인불가_바코드없음사유",
				# "modelNo": "1717171",
				# "extraProperties": null,
				# "certifications": [
				#   {
				# 	"certificationType": "NOT_REQUIRED",
				# 	"certificationCode": ""
				#   }
				# ],
				"searchTags": [
				"jdx",
				"JDX",
				"jdx 평촌점",
				"jdx 남성",
				"jdx 여성",
				"jdx 골프웨어 남성",
				"jdx 골프웨어 여성",
				"jdx 골프 웨어",
				"남성 골프 웨어",
				"여성 골프 웨어",
				"골프 웨어 이월상품",
				"골프 웨어",
				"골프 바지",
				"골프 티셔츠",
				"골프 점퍼",
				"골프화",
				"남성 스포츠웨어",
				"여성 스포츠웨어",
				"웨스트우드 이월상품",
				],
				"images": img_val,
				"notices": notice_val,
				"attributes": [
				{
					"attributeTypeName": "패션의류/잡화 사이즈",
					"attributeValueName": f"{size}"    
				},
				{
					"attributeTypeName": "색상",
					"attributeValueName": f"{attributeTypeName_color}"
				}
				],
				"contents": [
				{
					"contentsType": "TEXT",
					"contentDetails": [
					{
						"content": "http://jdx.coreits.co.kr/jdx/X123_topss",
						"detailType": "TEXT"
					},
					{
						"content": "A/S 책임자와 전화번호 : 031-380-1451",
						"detailType": "TEXT"
					}
					]
				}
				],
				# "offerCondition": "NEW",
				# "offerDescription": ""
			}
		item_val.append(item_info)


	#****************************************************************************************************************#


	os.environ['TZ'] = 'GMT+0'
	datetime=time.strftime('%y%m%d')+'T'+time.strftime('%H%M%S')+'Z'

	method = "POST"
	path = "/v2/providers/seller_api/apis/api/v1/marketplace/seller-products"
	message = datetime+method+path

	#replace with your own accesskey
	accesskey = "d2e4563f-7cfa-4996-97a5-852d396283ea"
	#replace with your own secretKey
	secretkey = "aa9360008f284772e907325d357a59ff2b8cd657"

	#********************************************************#
	#authorize, demonstrate how to generate hmac signature here
	signature=hmac.new(secretkey.encode('utf-8'),message.encode('utf-8'),hashlib.sha256).hexdigest()
	authorization  = "CEA algorithm=HmacSHA256, access-key="+accesskey+", signed-date="+datetime+", signature="+signature
	#print out the hmac key
	#print(authorization)
	#********************************************************#

	# ************* SEND THE REQUEST *************
	url = "https://api-gateway.coupang.com"+path

	true=True
	false=False
	null = None
	strjson={ 
			"displayCategoryCode": displayCategoryCode,
			"sellerProductName": f"{sellerProductName}",
			"vendorId": "A00138689",
			"saleStartedAt": "2020-11-12T00:00:00",
			"saleEndedAt": "2020-12-01T23:59:59",
			"displayProductName": f"{displayProductName}",
			"brand": "JDX_",
			"generalProductName": f"{generalProductName}",
			# "productGroup": "클렌징 오일",
			"deliveryMethod": "SEQUENCIAL",
			"deliveryCompanyCode": "KGB",
			"deliveryChargeType": "CONDITIONAL_FREE",
			"deliveryCharge": 2500,
			"freeShipOverAmount": 9800,
			"deliveryChargeOnReturn": 2500,
			"remoteAreaDeliverable": "N",
			"unionDeliveryType": "UNION_DELIVERY",
			"returnCenterCode": "1000517251",
			"returnChargeName": "경기도 안양시 동안로 119 뉴코아아울렛 평촌점 9층 온라인사무실",
			"companyContactNumber": "031-380-1451",
			"returnZipCode": "14073",
			"returnAddress": "경기도 안양시 동안구 동안로 119 (호계동)",
			"returnAddressDetail": "뉴코아아울렛 평촌점 9층 온라인 사무실_4",
			"returnCharge": 2500,
			# "returnChargeVendor": "N",
			# "afterServiceInformation": "A/S안내 1544-1255",
			# "afterServiceContactNumber": "1544-1255",
			"outboundShippingPlaceCode": 1790006,
			"vendorUserId": "aa4151",
			"requested": false,
			"items": item_val,
			"extraInfoMessage": "",
			"manufacture": "(주)신한코리아"}

	data = json.dumps(strjson).encode("utf-8")

	print('BEGIN REQUEST++++++++++++++++++++++++++++++++++++')
	req = urllib.request.Request(url)

	req.add_header("Content-type","application/json;charset=UTF-8")
	req.add_header("Authorization",authorization)

	req.get_method = lambda: method

	ctx = ssl.create_default_context()
	ctx.check_hostname = False
	ctx.verify_mode = ssl.CERT_NONE

	print('RESPONSE++++++++++++++++++++++++++++++++++++')
	try:
		resp = urllib.request.urlopen(req, data, context=ctx)
	except urllib.request.HTTPError as e:
		print(e.code)
		print(e.reason)
		print(e.fp.read())
	except urllib.request.URLError as e:
		print(e.errno)
		print(e.reason)
		print(e.fp.read())
	else:
		# 200
		body = resp.read().decode(resp.headers.get_content_charset())
		print(body)

	break
